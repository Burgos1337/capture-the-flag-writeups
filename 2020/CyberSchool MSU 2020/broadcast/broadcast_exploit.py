import gmpy
from Crypto.PublicKey import RSA
from Crypto.Util.number import bytes_to_long as btl
from Crypto.Util.number import long_to_bytes as ltb

def calc (N1, N2, N3, c1, c2, c3, e):
    tA = c1 * (N2*N3) * gmpy.invert(N2 * N3, N1)
    tB = c2 * (N1*N3) * gmpy.invert(N1 * N3, N2)
    tC = c3 * (N1*N2) * gmpy.invert(N1 * N2, N3)

    c = (tA + tB + tC) % (N1*N2*N3)

    m = gmpy.root(c, e)[0]
    return ltb(m)


def main():
    keys = []
    cip = []

    for i in range(1, 4):
	with open(f'{i}.pub.pem', 'r') as f:
	     key = RSA.importKey(f.read())
	     with open(f'{i}.enc', 'rb') as f:
	      	  c = btl(f.read())
	     keys.append(key.n)
	     cip.append(c)
 
    print(f'Dec : {calc(keys[0], keys[1], keys[2], cip[0], cip[1], cip[2], key.e)}')
	
if __name__ == '__main__':
   try:
       main()
   except KeyboardInterrupt as e:
       print(e)
